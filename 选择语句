--选择某一数据库
USE sql_store

/从某一table中调用所有数据/
SELECT *
FROM customers

/添加筛选条件：WHERE，添加排序依据：ORDER BY/

SELECT *
FROM customers
WHERE customers_id = 1

SELECT *
FROM customers
ORDER BY first_name

/从某一table中调用数据，并对数据进行运算, 用AS定义新变量/

SELECT
  last_name
  first_name
  points
  points * 10 + 100 AS ‘discount_factor'
 
/用DISTINCT去除重复的州/

SELECT DISTINCT state
FROM customers

--  课后练习
--  Return all the products
--  name
--  Unit price
--  New price (unit price * 1.1)

SELECT
  name
  Unit price
  Unit price * 1.1 AS New price
From products
  
-- WHERE子句
-- 数值查询可用 > < >= <= <> !=等符号
/查询积分大于3000的顾客/

SELECT *
FROM customers
WHERE points > 3000

/查询所在州为VA的顾客/

SELECT *
FROM customers
WHERE state = 'VA'

/查询在1990年后出生的顾客/

SELECT *
FROM customers
WHERE birth_date > '1990-01-01'

--  课后练习
--  Get the orders placed this year

SELECT *
FROM sql_store.orders
WHERE order_date > '2019-01-01'

--  AND,OR,NOT运算符
-- 搭配WHERE语句使用
/查询1990年后出生或积分大于1000的顾客/

SELECT *
FROM sql_store.customers
WHERE birth_date > '1990-01-01' OR points > 1000

/查询1990年后出生或积分大于1000且在VA居住的顾客/

SELECT *
FROM sql_store.customers
WHERE birth_date > '1990-01-01' OR (points > 1000 AND state = 'VA')

--  课后练习
--  From the order_items table, get the items
--    for order #6
--    where the total price is greater than 30

SELECT *
FROM sql_store.order_items
WHERE order_id = 6 AND quantity * unit_price > 30

-- IN运算符
-- 条件筛选，筛选出居住在CO和VA的顾客

SELECT * 
FROM customers
WHERE state in ('VA','CO')

-- 课后练习
-- Return products with
--   quantity in stock equal to 49, 38 ,72

SELECT *
FROM products
WHERE quantity_in_stock IN (49, 38, 72)

-- BETWEEN运算符
-- 筛选points在（1000，3000）的顾客

SELECT *
FROM customers
WHERE points BETWEEN 1000 AND 3000

--  课后练习
--  选出出生日期在1990年到2000年的顾客
SELECT *
FROM customers
WHERE birth_date BETWEEN 1990-01-01 AND 2000-01-01

--  LIKE运算符
--  模糊搜索
--  % any number of characters
--  _ single character
--  筛选Y开头的顾客的数据

SELECT *
FROM customers
WHERE name LIKE 'y%'

--  下划线表示字符，通过下划线可指定字符数
--  筛选名字字符数为6，开头为y的顾客

SELECT *
FROM customers
WHERE name LIKE 'y_____'

--  练习
--  Get the customers whose
--    addresses contain TRAIL or AVENUE
--    phone numbers end with 9

SELECT *
FROM world
WHERE address LIKE '%TRAIL%' OR
address LIKE '%AVENUE%'

SELECT *
FROM world
WHERE phone numbers LIKE '%9"

-- 正则表达式REGEXP
-- ^ beginning
-- $ end
-- | logigal or 
-- [abcd]
-- [a-f]

SELECT *
FROM customers
WHERE last_name REGEXP 'e'

--  练习
--  Get the customers whose
--    first names are ELKA or AMBUR
--    last names end with EY or ON
--    last names start with MY or contains SE
--    last names contain B followed by R or U

SELECT *
FROM customers
WHERE first_name REGEXP 'ELKA|AMBUR' OR
last_name REGEXP 'EY$|ON$|^MY|^SE|B[RU]'

--  IS NULL运算符
--  筛选有缺失值的项，亦可以使用IS NOT NULL来反选

SELECT *
FROM customer
WHERE phone IS NULL

--  ORDER BY运算符
--  排序 在变量后加DESCEND为倒序

SELECT *
FROM order_items
WHERE order_id=2
ORDER BY product_id

--  LIMIT子句
--  限定语句执行结果的偏移量，只有一个参数时限定返回列数，两个参数时第一个参数指偏移量，第二个参数指偏移后返回的行数
--  筛选搜索数据第4，5，6行

SELECT *
FROM customers
LIMIT 3,3

--  练习
--  Get the top three loyal customers
SELECT *
FROM customers
ORDER BY points DESC
LIMIT 3
